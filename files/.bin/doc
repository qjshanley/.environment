#!/bin/bash

sed() { /usr/bin/sed "$@" ; }

main() {
    if [ ! -d "${STACKS:?The environment variable needs to be defined.}" ] ; then
        echo The STACKS environment variable is not an existing directory.
        exit 2
    fi
    if [ "$1" != "utils" ] ; then
        export STACK="$(_doc_utils_ --check-stack "$1" || exit)"
        [ "$STACK" == "STACKERROR" ] && echo $STACK && exit
        shift 1
    fi
    case $1 in
        stats)  shift 1 ; _doc_stats_ "$@" ;;
        utils)  shift 1 ; _doc_utils_ "$@" ;;
        *)      _docker-compose "$@" ;;
    esac
}

_doc_utils_() { 
    case "$1" in
        --all)
            shift 1
            for stack in $(_doc_utils_ --stacks) ; do
                echo $stack
                sed -E 's/^/-- /' <<< "$(STACK=$stack ; _doc_utils_ --services)"
            done
            ;;
        --check-stack)
            shift 1
            if [ -d "$STACKS"/"$1" ] ; then
                echo "$1"
            else
                echo "STACKERROR"
            fi
            ;;
        --files-rel)
            shift 1
            local depth="$(echo ${STACKS}/ | sed 's@[^/]@@g' | wc -m)"
            _doc_utils_ --files-abs "$1" "$2" "$3" | cut -d '/' -f ${depth}-
            ;;
        --files-abs)
            shift 1
            {
                find -L "$STACKS"/"$STACK" -mindepth 1 -maxdepth ${3:-1} -regex "^.*/docker-compose\.${2:-\(yml\|yaml\)}$"
                find -L "$STACKS"/"$STACK" -mindepth 1 -maxdepth ${3:-1} -regex "^.*/docker-compose\.${1:+$1\.}${2:-\(yml\|yaml\)}$"
            } | sort | uniq
            ;;
        --services)
            shift 1
            local pads=( $'\t' '  ' '    ' )
            for config in $(_doc_utils_ --files-rel ; _doc_utils_ --files-rel '.*') ; do
                for pad in "${pads[@]}" ; do
                    local services="$(sed -En "/^services:/,/^[a-zA-Z]/{/^${pad}[a-zA-Z\'\"]/{s/[ :\'\"]//g;p;};}" "${STACKS}/${config}")"
                    [ "$services" ] && echo "$services" && break
                done
            done | sort | uniq
            ;;
        --stacks|*)
            shift 1
            _doc_utils_ --files-rel '' '' 9 | xargs dirname | sort
            ;;
    esac
}

_doc_stats_() {
    if [ -n "$*" ] ; then
        docker stats "${@#_}"
    else
        docker stats $(docker ps --format "{{.Names}}")
    fi
}

_docker-compose() {
    local args=()
    local srvcs=()
    local cmd=$1 ; shift 1
    while [ -n "$1" ] ; do
        case "$1" in
            --) 
                shift 1
                srvcs+=( "$@" )
                args+=( "$@" )
                shift "$#" 
                ;;
            -*) 
                args+=( "$1" )
                shift 1
                ;;
            *)
                local arg=$(compgen -W "$(_doc_utils_ -s)" -- "$1" | head -1)
                if [ "$arg" == "$1" ] ; then
                    srvcs+=( "$arg" )
                    args+=( "$arg" )
                else
                    args+=( "$1" )
                fi
                shift 1
                ;;
        esac
    done

    # convert a list to a regex group
    _or_list() { sed 's/ /|/g ; s/^/(/ ; s/$/)/' <<< "$*" ; }

    [ "${#srvcs[@]}" -eq 0 ] && srvcs+=( '.*' )

    # execute pre command scripts
    for f in $(_doc_utils_ --files-abs "$(_or_list "${srvcs[*]}")" "\.$cmd\.pre") ; do bash "$f" ; done

    # execute
    printf -v command_string -- "docker-compose %s $cmd ${args[*]}\n"     "$(printf -- " --file %s" $(_doc_utils_ --files-abs "$(_or_list "${srvcs[*]}")" ))"
    printf "%q\n" "$command_string"
    $command_string

    # execute post command scripts
    for f in $(_doc_utils_ --files-abs "$(_or_list "${srvcs[*]}")" "\.$cmd\.post") ; do bash "$f" ; done
}

main "$@"
