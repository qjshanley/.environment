#!/bin/bash

find() { /usr/bin/find "$@" ; }
sed() { /usr/bin/sed "$@" ; }

main() {
    if [ ! -d "${STACKS:?The environment variable needs to be defined.}" ] ; then
        echo The STACKS environment variable is not an existing directory.
        exit 2
    fi
    STACK="$(_doc_utils_ --check-stack "$1")"
    shift 1
    case $1 in
        utils)  shift 1 ; _doc_utils_ "$@" ;;
        stats)  shift 1 ; _doc_stats_ "$@" ;;
        *)      _docker-compose "$@" ;;
    esac
}

_doc_utils_() { 
    case "$1" in
        -a|--all)
            shift 1
            for stack in $(_doc_utils_ --stacks) ; do
                echo $stack
                sed -E 's/^/-- /' <<< "$(STACK=$stack ; _doc_utils_ --services)"
            done
            ;;
        -C|--check-stack)
            shift 1
            if [ -d "$STACKS"/"$1" ] ; then
                echo "$1"
            else
                echo "Error: STACK_NOT_FOUND"
                exit
            fi
            ;;
        -f|--files)
            (
                shift 1
                cd "$STACKS"/"$STACK"
                echo find -L . -mindepth 1 -maxdepth ${3:-1} -type f -regex ".*/docker-compose${1:+\.$1}.${2:-[yml|yaml]}$" | sort
            )
            ;;
        -s|--services)
            shift 1
            local pads=( $'\t' '  ' '    ' )
            for config in $(_doc_utils_ -f '.*' '\.(yml|yaml)') ; do
                for pad in "${pads[@]}" ; do
                    local services="$(sed -En "/^services:/,/^[a-zA-Z]/{/^${pad}[a-zA-Z\'\"]/{s/[ :\'\"]//g;p;};}" "$config")"
                    [ "$services" ] && echo "$services" && break
                done
            done | sort | uniq
            ;;
        *|-S|--stacks)
            (
                shift 1
                cd "$STACKS"/"$1"
                find -L . -mindepth 1 \( -type f -or -type l \) -and -name "*docker-compose*" -and -regex ".*[yaml|yml]"  -and -not -path "*/.*" -exec dirname {} \; | cut -d'/' -f2- | sort | uniq
            )
            ;;
    esac
}

_doc_stats_() {
    docker stats $(docker ps --format "{{.Names}}")
}

_docker-compose() {
    local args=()
    local srvcs=()
    local cmd=$1 ; shift 1
    while [ -n "$1" ] ; do
        case "$1" in
            --) 
                shift 1
                srvcs+=( "$@" )
                args+=( "$@" )
                shift "$#" 
                ;;
            -*) 
                args+=( "$1" )
                shift 1
                ;;
            *)
                local arg=$(compgen -W "$(_doc_utils_ -s)" -- "$1" | head -1)
                if [ "$arg" == "$1" ] ; then
                    srvcs+=( "$arg" )
                    args+=( "$arg" )
                else
                    args+=( "$1" )
                fi
                shift 1
                ;;
        esac
    done

    # convert a list to a regex group
    _or_list() { sed 's/ /|/g ; s/^/(/ ; s/$/)/' <<< "$*" ; }

    [ "${#srvcs[@]}" -eq 0 ] && srvcs+=( '.*' )

    # execute pre command scripts
    for f in $(_doc_utils_ -f "$(_or_list "${srvcs[*]}")" "\.$cmd\.pre") ; do bash "$f" ; done

    # execute
    printf -v command_string -- "docker-compose%s --project-directory ${STACKS}/${STACK} $cmd ${args[*]}\n" "$(printf -- " --file %s" $(_doc_utils_ -f '.*' "\.(yml|yaml)"))"
    eval "$command_string"

    # execute post command scripts
    for f in $(_doc_utils_ -f "$(_or_list "${srvcs[*]}")" "\.$cmd\.post") ; do bash "$f" ; done
}

main "$@"
